import http, { IncomingMessage } from "http";
import { makeHttpRequest } from "../http-collect";

jest.mock("http");
describe('makeHttpRequest', () => {
    beforeEach(() => {
      jest.clearAllMocks();
    });
  
    it('resuelve con los datos correctos en una respuesta exitosa', async () => {
      const mockData = 'respuesta de prueba';
      const mockedIncomingMessage = new IncomingMessage(new http.ClientRequest());
      mockedIncomingMessage.setEncoding = jest.fn();
      mockedIncomingMessage.on = jest.fn()
        .mockImplementationOnce((event, handler) => {
          if (event === 'data') handler(mockData);
          return mockedIncomingMessage;
        })
        .mockImplementationOnce((event, handler) => {
          if (event === 'end') handler();
          return mockedIncomingMessage;
        });
  
      http.get.mockImplementation((url, callback) => {
        callback(mockedIncomingMessage);
        return new http.ClientRequest();
      });
  
      await expect(makeHttpRequest('http://test.com')).resolves.toEqual(mockData);
    });
  
    it('rechaza con un error en caso de fallo en la solicitud', async () => {
      const mockError = new Error('Error de prueba');
      http.get.mockImplementation(() => {
        throw mockError;
      });
  
      await expect(makeHttpRequest('http://test.com')).rejects.toThrow(mockError);
    });
  });